/* .App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
} */




/* src/App.css */

/* Ensure the body and html take up full height and have no default margin */
html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  /* You can set a fallback body background if needed,
     but particles will cover it if they are opaque.
     If particles are semi-transparent, this body background might show through. */
  /* background-color: #1a1a2e; */ /* Example dark fallback */
}

.App {
  /* text-align: center; */ /* You might want to remove this or scope it more specifically
                             if Solver handles its own layout/alignment */
  min-height: 100vh; /* Ensure .App div covers the full viewport height */
  position: relative; /* Establishes a stacking context. Good practice. */
  /*
    IMPORTANT: The .App div itself does not need a transparent background if the
    Solver component's main content area (the light gray area from your screenshot)
    is made transparent. The AnimatedBackground with zIndex: -1 will be behind
    everything in the normal flow.
  */
}

/*
  The styles below (.App-logo, .App-header, .App-link, @keyframes App-logo-spin)
  are default Create React App styles.
  They likely DO NOT apply to the UI shown in your Rubik's Cube screenshot,
  as that UI (blue header, controls panel, etc.) would be styled within
  the Solver component or its own CSS files.

  If your Solver component DOES use these exact class names,
  you'll need to adjust them accordingly.
*/

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

/* This .App-header is likely NOT the blue header from your Rubik's Cube UI */
.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/*
  >>> CRITICAL CSS ADJUSTMENT NEEDED IN YOUR SOLVER COMPONENT'S STYLES <<<

  The `AnimatedBackground` will be behind your `Solver` component.
  To see it, the main content area of your `Solver` component
  (the part that was light gray in your initial screenshot, containing the cube
  and the white controls panel) needs to have its background set to `transparent`.

  Example (you'll need to find the correct selector in your Solver.js or its CSS):

  .solver-main-content-area {  // Or whatever class you use for that light gray area
    background-color: transparent;
  }

  Your blue header and dark footer (from the screenshot) can keep their opaque backgrounds.
  The white control panel can also keep its background, or you can make it semi-transparent:

  .controls-panel { // The white panel on the right
    background-color: rgba(255, 255, 255, 0.9); // Slightly transparent white
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }
*/
